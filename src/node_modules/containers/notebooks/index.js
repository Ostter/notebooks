import React, {Component} from 'react'
import {connect} from 'react-redux'
import * as R from 'ramda'
import { Link, withRouter } from 'react-router-dom'
import { compose } from 'redux'

import {
    fetchNotebooks,
    loadMoreNotebooks,
    fetchCategories
} from 'actions'
import {getNotebooks} from 'selectors'

class Notebooks extends Component {
    //fetch данных при загрузке приложения, запускаем actions
    componentDidMount () {
        this.props.fetchNotebooks()
        this.props.fetchCategories()
    }

    renderNotebook (notebook, index) {
        //получаем путем деструктуризации из props, из метода mapDispatchToProps контейнера
        const shortDescription = `${R.take(50, notebook.description)}...`;

        return (
            <div className='col-sm-4 col-lg-4 col-md-4 book-list' key={index}>
                <div className='thumbnail'>
                    <img
                        className='img-thumbnail'
                        src={notebook.image}
                        alt={notebook.name}
                    />
                    <div className='caption'>
                        <h4>
                            <Link to={`/notebooks/${notebook.id}`}>
                                {notebook.name}
                            </Link>
                        </h4>
                        <p>{shortDescription}</p>
                        <p className='itemButton'>
                            <Link
                                to={`/notebooks/${notebook.id}`}
                                className='btn btn-default'
                            >
                                More info
                            </Link>
                        </p>
                    </div>
                </div>
            </div>
        )
    }


    render () {
        //actions передаются в props в методе mapDispatchToProps
        const {notebooks, loadMoreNotebooks} = this.props;
        return (
            <div>
                <div className='books row'>
                    {notebooks.map((notebook, index) => this.renderNotebook(notebook, index))}
                </div>
                <div className='row'>
                    <div className='col-md-12'>
                        <button
                            onClick={loadMoreNotebooks} //назначем action событию onClick
                            className='pull-right btn btn-primary'
                        >
                            Load More
                        </button>
                    </div>
                </div>
            </div>
        )
    }
}

//ownProps здесь доступен, так как этот компонент рендерится прямо на Роутере (см. index.js главный)
//а остальные компоненты вложенные, и поэтому нужно добавлять withRouter, чтобы получить инфу о Route
const mapStateToProps = (state, ownProps) => {
    return {
        notebooks: getNotebooks(state, ownProps)
    }
}

const mapDispatchToProps = {
    fetchNotebooks,
    loadMoreNotebooks,
    fetchCategories
}

// export default connect(mapStateToProps, mapDispatchToProps)(Notebooks)

export default compose(
    withRouter,
    connect( mapStateToProps, mapDispatchToProps )
)(Notebooks)

