import {
    FETCH_NOTEBOOKS_START,
    FETCH_NOTEBOOKS_SUCCESS,
    FETCH_NOTEBOOKS_FAILURE,
    LOAD_MORE_NOTEBOOKS_START,
    LOAD_MORE_NOTEBOOKS_SUCCESS,
    LOAD_MORE_NOTEBOOKS_FAILURE,
    FETCH_NOTEBOOK_BY_ID_START,
    FETCH_NOTEBOOK_BY_ID_SUCCESS,
    FETCH_NOTEBOOK_BY_ID_FAILURE,
    SEARCH_NOTEBOOK,
    FETCH_CATEGORIES_START,
    FETCH_CATEGORIES_SUCCESS,
    FETCH_CATEGORIES_FAILURE,
} from './actionTypes'

import {
    fetchNotebooks as fetchNotebooksApi,
    loadMoreNotebooks as loadMoreNotebooksApi,
    fetchNotebookById as fetchNotebookByIdApi,
    fetchCategories as fetchCategoriesApi
} from 'api'

import { getRenderedNotebooksLength }  from 'selectors'

//next - это dispatch

//загрузка ноутбуков в state
export const fetchNotebooks = () => async next => {
    next({type: FETCH_NOTEBOOKS_START});

    try {
        const notebooks = await fetchNotebooksApi();
        next({
            type: FETCH_NOTEBOOKS_SUCCESS,
            payload: notebooks
        })
    } catch (err) {
        next({
            type: FETCH_NOTEBOOKS_FAILURE,
            payload: err,
            error: true
        })
    }
};

//загрузка новой пачки записей ноутбуков в state
export const loadMoreNotebooks = () => async (next, getState) => {
    const offset = getRenderedNotebooksLength(getState()); //getState() возвращает текущий store
    next({type: LOAD_MORE_NOTEBOOKS_START});

    try {
        const notebooks = await loadMoreNotebooksApi({offset});
        next({
            type: LOAD_MORE_NOTEBOOKS_SUCCESS,
            payload: notebooks
        })
    } catch (err) {
        next({
            type: LOAD_MORE_NOTEBOOKS_FAILURE,
            payload: err,
            error: true
        })
    }
};

export const fetchNotebookById = id => async next => {
    next({type: FETCH_NOTEBOOK_BY_ID_START});

    try {
        const notebook = await fetchNotebookByIdApi(id);
        next({
            type: FETCH_NOTEBOOK_BY_ID_SUCCESS,
            payload: notebook
        })
    } catch (err) {
        next({
            type: FETCH_NOTEBOOK_BY_ID_FAILURE,
            payload: err,
            error: true
        })
    }
}

//синхронные
//обработчик для action searchNotebook находится в reducer notebooksPage
export const searchNotebook = text => next => {
    next({
        type: SEARCH_NOTEBOOK,
        payload: text
    })
}

//загрузка категорий ноутбуков в state
export const fetchCategories = () => async dispatch => {
    dispatch({type: FETCH_CATEGORIES_START})

    try {
        //ждем результат работы асинхронного fetchCategoriesApi()
        const categories = await fetchCategoriesApi()
        dispatch({
            type: FETCH_CATEGORIES_SUCCESS,
            payload: categories
        })
    } catch (err) {
        dispatch({
            type: FETCH_CATEGORIES_FAILURE,
            payload: err,
            error: true
        })
    }
}
