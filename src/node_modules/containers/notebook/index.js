import React, { Component } from 'react'
import { connect } from 'react-redux'
import * as R from 'ramda'
import { Link } from 'react-router-dom'

import {getNotebookById} from 'selectors'
import {fetchNotebookById} from 'actions'

class Notebook extends Component {

    componentDidMount () {
        this.props.fetchNotebookById(this.props.match.params.id);
        console.log('componentDidMount this.props', this.props);
    }

    renderFields () {
        console.log('renderFields this.props', this.props);
        const {notebook} = this.props;
        const columnFields = R.compose( //смешиваем несколько методов
            R.toPairs, //получаем массив из массивов формата ключ-значение
            R.pick([ //берем только эти поля из notebook
                'screenSize',
                'touchScreen',
                'hardDriveType',
                'hardDriveCapacity',
                'graphics',
                'systemMemoryRAM',
                'processorSpeedBase',
                'processorModel',
                'operatingSystem'
            ])
        )(notebook);
        console.log(`([key, value])`, columnFields);
        return columnFields.map(([key, value]) => (
            <div className='column' key={key}>
              <div className='ab-details-title'>
                <p>{key}</p>
              </div>
              <div className='ab-details-info'>
                  {value}
              </div>
            </div>
        ))
    }

    renderContent () {
        console.log('renderContent this.props', this.props);
        const {notebook} = this.props;

        return (
            <div className='thumbnail'>
              <div className='row'>
                <div className='col-md-6'>
                  <img
                      className='img-thumbnail'
                      src={notebook.image}
                      alt={notebook.name}
                  />
                </div>
                <div className='col-md-6'>
                    {this.renderFields()}
                </div>
              </div>
              <div className='caption-full'>
                <h4>{notebook.name}</h4>
                <p>{notebook.description}</p>
              </div>
            </div>
        )
    }

    renderBottombar () {
        //const {notebook} = this.props;
        return (
           <Link to='/' className='btn btn-info btn-block'>Back to Home page</Link>
        )
    }

    render () {
        console.log('render this.props', this.props);
        const {notebook} = this.props;
        //проверка на то, что ноутбук уже сделал fetch из бд, т.е. загрузился на форму
        //так как fetch работает асинхронно, и notebook сперва будет undefined и render будет с ошибкой
        return (
            <div className='view-container'>
              <div className='container'>
                <div className='row'>
                  <div className='col-md-9'>
                      {notebook && this.renderContent()}
                  </div>
                </div>
                <div className='row'>
                    <div className='col-md-3'>
                        {notebook && this.renderBottombar()}
                    </div>
                </div>
              </div>
            </div>
        )
    }
}

const mapStateToProps = state => {
    return {
        notebook: getNotebookById(state, state.notebookPage.id)
    }
}

const mapDispatchToProps = {
    fetchNotebookById
}

export default connect(mapStateToProps, mapDispatchToProps)(Notebook)

